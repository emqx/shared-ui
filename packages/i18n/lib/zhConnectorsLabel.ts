export const zhConnectorsLabel: Record<string, Record<string, string>> = {
  common: {
    connect_timeout: '连接超时',
    bootstrap_hosts: '主机列表',
    min_metadata_refresh_interval: '元数据刷新最小间隔',
    metadata_request_timeout: '元数据请求超时',
    tcp_keepalive: 'TCP Keepalive',
    sndbuf: 'Socket 发送缓存大小',
    recbuf: 'Socket 收包缓存大小',
    nodelay: '是否关闭延迟发送',
    username: '用户名',
    password: '密码',
    pool_size: '连接池大小',
    pool_type: '连接池类型',
    server: '服务器地址',
    database: '数据库名字',
    health_check_interval: '健康检查间隔',
    start_timeout: '启动超时时间',
    max_retries: '最大重试次数',
    worker_pool_size: '缓存池大小',
    request_ttl: '请求超期',
    max_buffer_bytes: '缓存队列最大长度',
    inflight_window: '请求飞行队列窗口',
    servers: '服务器列表',
    enable_pipelining: 'HTTP 流水线',
    url: '服务器地址',
  },
  kafka_producer: {
    kerberos_principal: 'Kerberos Principal',
    kerberos_keytab_file: 'Kerberos Keytab 文件',
    mechanism: '认证方法',
    authentication: '认证',
  },
  http: {
    url: 'URL',
    headers: '请求头',
    enable_pipelining: 'HTTP 管道',
  },
  gcp_pubsub_producer: {
    pipelining: 'HTTP 流水线',
    service_account_json: 'GCP 服务账户凭证',
    query_mode: '请求模式',
    batch_size: '最大批量请求大小',
  },
  azure_event_hub_producer: {
    bootstrap_hosts: '引导主机',
  },
  syskeeper_forwarder: {
    ack_mode: 'ACK 模式',
    ack_timeout: 'ACK 超时',
  },
  redis: {
    parameters: '部署模式',
    sentinel: '哨兵模式',
  },
  mongodb: {
    parameters: '部署模式',
    w_mode: '写模式',
    r_mode: '读模式',
    srv_record: 'SRV 记录',
    use_legacy_protocol: '使用旧协议',
    auth_source: '认证源',
    replica_set_name: '副本集名称',
    max_overflow: '最大溢出',
    overflow_ttl: '溢出 TTL',
    overflow_check_period: '溢出检查周期',
    local_threshold_ms: '本地阈值',
    connect_timeout_ms: '连接超时',
    socket_timeout_ms: '套接字操作超时',
    server_selection_timeout_ms: '服务器选择超时',
    wait_queue_timeout_ms: '等待队列超时',
    heartbeat_frequency_ms: '心跳期',
    min_heartbeat_frequency_ms: '最小心跳周期',
  },
  influxdb: {
    parameters: 'InfluxDB 版本',
    bucket: 'Bucket',
    org: '组织',
    token: 'Token',
  },
  iotdb: {
    base_url: 'IoTDB REST 服务基础 URL',
    iotdb_version: 'IoTDB 版本',
  },
  elasticsearch: {
    server: '服务器地址',
  },
  mqtt: {
    server: 'MQTT 服务地址',
    clientid_prefix: '客户端 ID 前缀',
    proto_ver: 'MQTT 协议版本',
    bridge_mode: '桥接模式',
    clean_start: '清除会话',
    keepalive: 'Keepalive',
    retry_interval: '消息重发间隔',
    max_inflight: '飞行窗口',
  },
  cassandra: {
    keyspace: 'Keyspace',
  },
  opents: {
    summary: '摘要信息',
    details: '详细信息',
  },
  clickhouse: {
    url: '服务器 URL',
  },
  dynamo: {
    url: 'DynamoDB 地址',
    aws_access_key_id: '连接访问 ID',
    aws_secret_access_key: '连接访问密钥',
  },
  gcp_pubsub_consumer: {
    pipelining: 'HTTP 流水线',
    service_account_json: 'GCP 服务账户凭证',
    pull_max_messages: '拉取的最大消息数',
  },
  hstreamdb: {
    grpc_timeout: 'gRPC 超时',
  },
  kafka_consumer: {
    bootstrap_hosts: '主机列表',
    consumer_key_encoding_mode: 'Key 编码模式',
    consumer_value_encoding_mode: 'Value 编码模式',
    consumer_topic_mapping: '主题映射关系',
    consumer_offset_reset_policy: '偏移重置策略',
    consumer_mqtt_topic: 'MQTT 主题',
    min_metadata_refresh_interval: '元数据刷新最小间隔',
    metadata_request_timeout: '元数据请求超时',
    consumer_max_batch_bytes: '拉取字节数',
    consumer_offset_commit_interval_seconds: '偏移提交间隔',
    topic: 'Kafka 主题名称',
    mqtt_topic: 'MQTT 主题',
    qos: 'QoS',
  },
  rocketmq: {
    access_key: 'AccessKey',
    secret_key: 'SecretKey',
    security_token: '安全令牌',
  },
  sqlserver: {
    driver: 'SQL Server Driver 名称',
  },
  oracle: {
    sid: 'Oracle Database SID',
    service_name: 'Oracle 数据库服务名称',
  },
  rabbitmq: {
    port: '端口',
    virtual_host: '虚拟主机',
    heartbeat: '心跳',
    timeout: '连接超时时间',
  },
  pulsar: {
    pulsar_topic: 'Pulsar 主题名称',
    strategy: '分区选择策略',
    compression: '压缩',
    sync_timeout: '同步发布超时',
    retention_period: '消息保留时间',
    send_buffer: 'Socket 发送缓存大小',
    max_batch_bytes: '最大批量字节数',
    mode: '缓存模式',
    per_partition_limit: '分区缓存上限',
    segment_bytes: '缓存文件大小',
    memory_overload_protection: '内存过载保护',
    jwt: 'JWT',
    authentication: '认证',
  },
  kinesis: {
    aws_access_key_id: 'AWS 访问密钥 ID',
    aws_secret_access_key: 'AWS 秘密访问密钥',
    endpoint: 'Amazon Kinesis 端点',
  },
  greptimedb: {
    dbname: '数据库',
  },
  s3: {
    access_key_id: '访问密钥 ID',
    secret_access_key: '访问密钥',
    host: '地址',
    port: '端口',
    ipv6_probe: 'IPv6 探针',
    headers: '请求头',
    request_timeout: '请求超时',
  },
}
