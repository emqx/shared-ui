export const enAiLog = {
  systemTitle: 'Log Analysis AI Assistant',
  noMCPServers: 'No MCP server is available, please configure the MCP server gateway.',
  configMCPServerGateway: 'Configure MCP Server Gateway',
  mcpServerGatewayConfigs: 'MCP Server Gateway Configurations',
  cancel: 'Cancel',
  save: 'Save',
  mqttHost: 'MQTT Host',
  mqttPort: 'MQTT Port',
  mqttUsername: 'MQTT Username',
  mqttPassword: 'MQTT Password',
  mqttClientId: 'MQTT Client ID',
  mqttAppId: 'MQTT App ID',
  saveSuccess: 'Saved successfully',
  parseUserIntention: 'Parse User Intention',
  loadLogEntries: 'Load Log Entries',
  generalConversation: 'General Conversation',
  extractAndExplainLogEntries: 'Extract and Explain Log Entries',
  queryEmqxContext: 'Query EMQX Context',
  genAnalysisReport: 'Generate Analysis Report',
  completeReport: 'Complete Report',
  funcCall: 'Function Call',
  analysisResultTip: 'The following is the report content:',
  responseConfirm: 'Please confirm the result is ok?',
  yes: 'Yes',
  no: 'No',
  refreshConfirm:
    'There is a conversation in progress, confirm to clear the conversation and start a new one?',
  confirm: 'Confirm',
  guidanceText:
    'Welcome to the Log Analysis AI Assistant. I will leverage technologies such as LLM and RAG,as well as utilize the MCP tool to query system status, to help you analyze EMQX-related logs and quickly identify and resolve issues. Here are some example questions you can ask,',
  querySample1: 'Query the error/warning log messages from the past 5 minutes.',
  querySample2: 'Query the latest 5 error/warning log messages.',
  querySample3: 'Analyze log: ',
  noConfigStatus:
    'MCP server gateway not configured. Please configure the server gateway and connect to the server before proceeding with the analysis of server logs.',
  disconnectedStatus: 'Cannot connect to your MCP servers, please check your settings or network.',
  selectServerRequired: 'Please select the MCP server to connect.',
  funcName: 'Function Name',
  funcArgs: 'Function Arguments',
  funcOutput: 'Function Output',
  permissionRequest: 'Tool "{tool}" requires permission to access system resources.',
  deny: 'Deny',
  allowOnce: 'Allow Once',
  allowAlways: 'Allow Always',
  reportGenerationCompleted: 'Report generation completed.',
  userCancelled: 'User cancelled the operation.',
}
